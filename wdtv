#!/usr/bin/env python

import optparse
import os
import sys

from wdtvmd import common
from wdtvmd import movies
from wdtvmd import tv


class StopProcessing(Exception):
    pass


def choose(filename, choices):
    print 'Multiple options matched for %s' % filename
    while True:
        for i, choice in enumerate(choices):
            print '%-3i: %s' % (i + 1, choice)
        c = raw_input('Which? > ')
        try:
            return int(c) - 1
        except ValueError:
            print 'Invalid Choice'

def tv_handler(options, filename, hint=None):
    filename = os.path.abspath(filename)
    try:
        tv.lookup_tv_file(filename, force=options.force, hint=hint)
    except common.AmbiguousResultError as e:
        if options.interactive and not hint:
            choice = choose(filename, e.choices)
            tv_handler(options, filename, hint=e.choices[choice])
        elif options.stop:
            raise StopProcessing()
    except common.FilenameFormatError as e:
        print 'Unable to parse season/episode from %s' % filename
        if options.stop:
            raise StopProcessing()


def movie_handler(options, filename):
    filename = os.path.abspath(filename)
    try:
        movies.lookup_movie_file(filename, force=options.force)
    except common.AmbiguousResultError as e:
        if options.interactive and not hint:
            choice = choose(filename, e.choices)
            movie_handler(options, filename, hint=e.choices[choice])
        elif options.stop:
            raise StopProcessing()


def main():
    parser = optparse.OptionParser()
    parser.add_option('-k', '--key', help='API Key')
    parser.add_option('-r', '--recursive',
                      help='Process arguments recursively',
                      action='store_true', default=False)
    parser.add_option('-t', '--tv',
                      help='Process TV files',
                      action='store_true', default=False)
    parser.add_option('-m', '--movies',
                      help='Process movie files',
                      action='store_true', default=False)
    parser.add_option('-i', '--interactive',
                      help='Interactively prompt on warning/error',
                      action='store_true', default=False)
    parser.add_option('-s', '--stop',
                      help='Stop on warning/error',
                      action='store_true', default=False)
    parser.add_option('-f', '--force',
                      help='Force updating even if metadata exists',
                      action='store_true', default=False)
    (options, args) = parser.parse_args()

    context = common.AppContext(apikey=options.key)

    if options.tv:
        handler = lambda f: tv_handler(options, f)
    elif options.movies:
        handler = lambda f: movie_handler(options, f)
    else:
        handler = None

    if not handler:
        print 'ERROR: Either --tv or --movies is required'
        sys.exit(1)

    for filename in args:
        try:
            if options.recursive:
                errors = common.handle_recursive(filename, handler)
                if errors:
                    print 'Errors:'
                    print os.linesep.join(['%s: %s' % (f, e) for f, e in errors])
            elif not os.path.isfile(filename):
                print '%s is not a file' % filename
            else:
                handler(filename)
        except StopProcessing:
            print 'Aborted.'

if __name__ == '__main__':
    main()
